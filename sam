#!/bin/bash
#set -vx

if [[ -z $SAM_DB_LIST ]];then
        SAM_DB_LIST='/var/db/sam/list_installed';
fi;

if [[ -z $BIN_DIR ]]; then
        BIN_DIR='/opt/bin';
fi;

if [[ -z $SAM_DB_SQLITE ]];then
        SAM_DB_SQLITE='/var/db/sam/smilart.db';
fi;
##Constant

IMAGE='';

## Functions
# Copy META from image
copy_meta_func () {
	# input: $IMAGE 
	TEMPLATE_DIR=`mktemp -d`;
	docker run -i -t --rm -v $TEMPLATE_DIR:$TEMPLATE_DIR  --net=host --entrypoint="cp" $IMAGE -r /meta $TEMPLATE_DIR/meta 2>&1 > /dev/null;
	if [[ $? -ne 0 ]]; then
		echo -e "\E[31mERROR: Directory '/meta' not found in image.">&2;tput sgr0;
		rm -rf $TEMPLATE_DIR;
		exit 1;
	fi;
	# output $pwd $TEMPLATE_DIR
}

# Uninstall apps function
uninstall_apps_func () {
	#
	echo;
	echo -e "\E[32mUninstalling app $IMAGE.";tput sgr0;
	copy_meta_func;
	pwd=$PWD;
	cd $TEMPLATE_DIR/meta;
	source $TEMPLATE_DIR/meta/uninstall;
	cd $pwd;
	rm -rf $TEMPLATE_DIR;
	echo;
}

# Install apps function
install_apps_func () {
	echo;
	echo -e "\E[32mInstalling app $IMAGE.";tput sgr0;
	copy_meta_func;
	pwd=$PWD;
	cd $TEMPLATE_DIR/meta;
	echo;
	source $TEMPLATE_DIR/meta/install;
	cd $pwd;
	rm -rf $TEMPLATE_DIR;
	echo;
}

# Save apps in db function
save_apps_to_db_sqlite_func () {
	# Exist app in db?
	TEST_EXIST=`echo "$IMAGE" | awk -F ':' 'NF--' | sed "s/ /:/g"`;
	if [[ -n `list_apps_in_db_func | awk  'BEGIN {OFS = ":"} {print $3, $4}' | grep $TEST_EXIST` ]];then
		echo -e "\E[31mERROR: App exist in db. ">&2;tput sgr0;
		echo "List exist apps: ./sam -l";
		echo;
		exit 1;
	fi;
	echo  "Save app to db.";
	# Collecting info for app
	IMAGE_ID=`docker images --no-trunc | grep -v 'REPOSITORY' | awk -F ' ' ' {print $1,$2,$3} ' | sed "s/ /:/g" | grep "$IMAGE" | awk -F ':' '{print $NF}'`;
	IMAGE_VERSION=`docker images --no-trunc | grep -v 'REPOSITORY' | awk -F ' ' ' {print $1,$2} ' | sed "s/ /:/g" | grep "$IMAGE" | awk -F ':' '{print $NF}'`;
	IMAGE_NAME=`docker images --no-trunc | grep "$IMAGE_ID" | tail -1 | awk -F ' ' ' {print $1} '`;
	# Edit db
	sqlite3 $SAM_DB_SQLITE "insert into $SAM_DB_TABLE_INSTALL_APPS (DockerId,ImageName,ImageVersion) values ('$IMAGE_ID','$IMAGE_NAME','$IMAGE_VERSION');";
	unset TEST_EXIST;
	unset IMAGE_ID;
	unset IMAGE_VERSION;
	unset IMAGE_NAME;
}

# Delete apps in db function
delete_apps_to_db_func () {
	echo  "Deleting app in db.";
	sqlite3 $SAM_DB_SQLITE "delete from $SAM_DB_TABLE_INSTALL_APPS where DockerId='$IMAGE'";
	
}

# Image latest?
image_latest_func (){
	if [[ -z `echo "$IMAGE" | awk -F '/' '{print $NF}' | awk -F ':' '{print $2}'` ]];then
		IMAGE="$IMAGE:latest";
	fi;
}

create_connect_func() {
	echo "Creating 'connect' function.";
	echo '#!/bin/bash 

connect_func(){
PID=`/usr/bin/docker inspect --format {{.State.Pid}} $1`;
if [ -z $PID ]; then
        echo -e "\E[31mContainer $1 is not found."; tput sgr0;
else
        if [ $PID -eq 0 ]; then
                echo -e "\E[31mContainer $1 is not started.";tput sgr0;
        else
                echo -e "\E[32mConnect to container $1."; tput sgr0;
                /usr/bin/docker exec -i -t $1 /bin/bash -c "cd /root ; TERM=xterm HOME=/root /bin/bash";
        fi;
fi;
}

connect_func $@;' > $BIN_DIR/connect;
	chmod +x $BIN_DIR/connect;
	if [[ -z `id smilart 2>&1 | grep 'no such user'` ]]; then
		chown smilart $BIN_DIR/connect;
	fi;
}

### Commands
#
if [[ -z `which docker` ]]; then
	echo -e "\E[31mERROR: Not found command 'docker' in system.">&2;tput sgr0;
	exit 1;
fi;

# This root?
if [[ $EUID -ne 0 ]]; then
	echo -e "\E[31mThis script must be run as root">&2;tput sgr0;
	exit 1;
fi

# Exist BIN_DIR dirrectory ?
if ! [[ -d $BIN_DIR ]]; then
	echo "Creating $BIN_DIR.";
	mkdir -p $BIN_DIR;
fi

# Exist BIN_DIR in path ?
if [[ -z `echo $PATH | grep $BIN_DIR` ]]; then
	echo -e "\E[31mERROR: Not found path \"$BIN_DIR\" in environments \$PATH. Add.">&2;tput sgr0;
	exit 1;
fi;

# Exist command 'connect'?
if ! [[ -f $BIN_DIR/connect ]]; then
	create_connect_func;
	echo;
fi;

# Exist command sqlite3
if [[ -z `which sqlite3` ]]; then
	echo -e "\E[31mERROR: Not found command 'sqlite3' in system.">&2;tput sgr0;
	exit 1;
fi;

# Exist db?
SAM_DB_TABLE_INSTALL_APPS="Apps";
if [[ -z `sqlite3 $SAM_DB_SQLITE "SELECT name FROM sqlite_master WHERE type='table' AND name='$SAM_DB_TABLE_INSTALL_APPS'"` ]];then
	echo;
	echo "Not found db sam: $SAM_DB_SQLITE. Creating db - $SAM_DB_TABLE_INSTALL_APPS.";
	echo;
	sqlite3 $SAM_DB_SQLITE "create table $SAM_DB_TABLE_INSTALL_APPS (id INTEGER PRIMARY KEY,DockerId TEXT,ImageName TEXT,ImageVersion TEXT);";
fi;

SAM_DB_TABLE_REPOS="Repos";
SAM_DB_TABLE_REPOS_URL="https://index.docker.io/v1/";
if [[ -z `sqlite3 $SAM_DB_SQLITE "SELECT name FROM sqlite_master WHERE type='table' AND name='$SAM_DB_TABLE_REPOS'"` ]];then
	echo;
	echo "Not found db sam: $SAM_DB_SQLITE. Creating db - $SAM_DB_TABLE_REPOS.";
	echo;
	sqlite3  $SAM_DB_SQLITE "create table $SAM_DB_TABLE_REPOS (id INTEGER PRIMARY KEY,ReposFlag TEXT,ReposName TEXT,ReposUrl, TEXT, ReposUser TEXT, ReposPass TEXT, ReposEmail TEXT);";
	echo "Adding default repository: $SAM_DB_TABLE_REPOS_URL";
	sqlite3 $SAM_DB_SQLITE "insert into $SAM_DB_TABLE_REPOS (ReposFlag,ReposName,ReposUrl,ReposUser,ReposPass,ReposEmail) values ('*','smilart','$SAM_DB_TABLE_REPOS_URL',' ',' ',' ');";
fi;
unset SAM_DB_TABLE_REPOS_URL;

#List in SQLite db
list_apps_in_db_func () {
	sqlite3 $SAM_DB_SQLITE "SELECT * from $SAM_DB_TABLE_INSTALL_APPS" | awk -F '|' '{print $1, $2, $3, $4}';
}

list_repos_in_db_func () {
	sqlite3 $SAM_DB_SQLITE "SELECT * from $SAM_DB_TABLE_REPOS" | awk -F '|' '{print $1, $2, $3, $4, $5, $6}';
}
#Exist repos name?
exist_repos_name_in_db_func() {
	if [[ -z $SAM_DB_TABLE_REPOS_NAME ]];then
		echo -e "\E[31mERROR: Variable from name repository is empty.">&2;tput sgr0;
		exit 1;
	fi;
	if [[ -z `sqlite3 $SAM_DB_SQLITE "SELECT ReposName from $SAM_DB_TABLE_REPOS" | \
                        while read line; do \
                            if [ $line == $SAM_DB_TABLE_REPOS_NAME ];then \
                                echo $line; \
                                break; \
                            fi; \
                        done;` ]];then
		echo -e "\E[31mERROR: Repository name '$SAM_DB_TABLE_REPOS_NAME' is not found in db.">&2;tput sgr0;
		echo "Existing repositories look with 'sam --repos-list'.";
		exit 1;
	fi;
}	

USAGE="
Options:
	-f  [archive.tar]	Load image from tar archive
	-i  [image]:[version]	Install selected application
	-u  [image]:[version]	Uninstall selected application
	-x  [-f:-i:-u] 		Debug mode
	-I  [image]:[version]	Print application info
	-c  [image]:[version]	Copy metadata from image to directory /tmp
	-l  			List installed applications
	-h           		Help

Environments:
	SAM_DB_LIST		SAM database, default: SAM_DB_LIST=$SAM_DB_LIST
	BIN_DIR			Path to directory with executable files, default: BIN_DIR=$BIN_DIR	
";

while getopts "li:f:u:c:xI:h-:" OPTION
do
    case $OPTION in

	l ) echo;
	    echo "      List apps:";
	    echo;
	    list_apps_in_db_func | awk 'BEGIN {OFS = ":"} {print $3, $4}';
	    echo;
	    exit 0
	  ;;

#	L ) ping -c 1 -n -q registry.hub.docker.com > /dev/null;
#	    if [ $? -ne "0" ]; then
#		echo -e "\E[31mERROR: Host registry.hub.docker.com is unknown.">&2;tput sgr0;
#		exit 1;
#	    fi;
#	    LIST_VERSIONS=`curl "https://registry.hub.docker.com//v1/repositories/$OPTARG/tags" -f -s | sed 's/,/,\n/g' | grep name | awk -F '"' '{print $4}'`;
#	    if [ $? -ne "0" ]; then
#		echo -e "\E[31mERROR: Image name is unknown.">&2;tput sgr0;
#		exit 1;
#	    else
#		echo;
#		echo "      List versions:";
#		echo;
#		echo "$LIST_VERSIONS" | sed 's/ /\n/g' | sed -e 's#^#'"$OPTARG"':#g';
#		echo;
#	    fi;
#	    exit 0
#	  ;;

	x ) set -vx
	  ;;

	f ) if [ -f $OPTARG ]; then

		## Find image name to archive
		# Find file "repositories"
		tar -xf $OPTARG repositories;
		if [[ $? -ne 0 ]]; then
		    echo -e "\E[31mERROR: File repositories not found in archive.">&2;tput sgr0;
		    echo "May be incorrectly created archive.";
		    exit 1;
		fi;
		# Correct file "repositories"
		IMAGE=`cat repositories | awk -F '"' ' {print $2,$4} ' | sed "s/ /:/g"`;
		if [[ -z $IMAGE ]]; then
		    echo -e "\E[31mERROR: Incorrect file 'repositories' in archive.">&2;tput sgr0;
		    echo "Not found image name in file.";
		    echo "May be incorrectly created archive.";
		    exit 1;
		fi;
		rm -f repositories;
		##
		if [[ -z `list_apps_in_db_func | awk 'BEGIN {OFS = ":"} {print $3, $4}' | grep "$IMAGE"` ]];then
			echo "App not found in db.";
			# Load image
			echo "Loading image $IMAGE.";
			docker load -i $OPTARG;
			if [[ $? -ne 0 ]]; then
			    echo -e "\E[31mERROR: Loading image.">&2;tput sgr0;
			    exit 1;
			fi;
			# Install app
			save_apps_to_db_sqlite_func;
			install_apps_func;
			echo -e "\E[32mApp $IMAGE installed.";tput sgr0;
			echo;
		else 
			echo -e "\E[31mERROR: App exist in db.">&2;tput sgr0;
			exit 1;
	   	fi;
	   else
		echo -e "\E[31m$0: Archive image is not defined." >&2;tput sgr0;
		exit 1;
	   fi
	  ;;

	i ) IMAGE=$OPTARG;
	   image_latest_func;
	   # Installed app?
	   if [[ -n `list_apps_in_db_func | awk 'BEGIN {OFS = ":"} {print $3, $4}' | grep "$IMAGE"` ]];then
		echo -e "\E[31mERROR: App found in db. Stop installation.">&2;tput sgr0;
		exit 1;
	   fi;
	   # Exist image?
	   if [[ -z `docker images --no-trunc | grep -v 'REPOSITORY' | awk -F ' ' ' {print $1,$2} ' | sed "s/ /:/g" | grep "$IMAGE"` ]];then
		echo -e "\E[31mERROR: Image not found in registry docker. Stop installation.">&2;tput sgr0;
		exit 1;
	   fi;
	   # Install app
	   save_apps_to_db_sqlite_func;
	   install_apps_func;
	   echo -e "\E[32mApp $IMAGE installed.";tput sgr0;
	   echo;
	   exit 0
	  ;;
	
	u ) IMAGE=$OPTARG;
	   image_latest_func;
	   # Installed app?
	   if [[ -z `list_apps_in_db_func | awk 'BEGIN {OFS = ":"} {print $3, $4}' | grep "$IMAGE"` ]];then
		echo -e "\E[31mERROR: App not found in db.">&2;tput sgr0;
		exit 1;
	   else
		IMAGE=`docker images --no-trunc | grep -v 'REPOSITORY' | awk -F ' ' ' {print $1,$2,$3} ' | sed "s/ /:/g" | grep "$IMAGE" | awk -F ':' '{print $NF}'`;
	   fi;
	   # Exist app?
	   if [[ -z `docker images --no-trunc | grep -v 'REPOSITORY' | awk -F ' ' ' {print $3} ' | grep "$IMAGE"` ]];then
		echo -e "\E[31mERROR: Image not found in registry docker.">&2;tput sgr0;
		exit 1;
	   fi;
	   # Uninstall app
	   uninstall_apps_func;
	   delete_apps_to_db_func;
	   echo -e "\E[32mApp $IMAGE uninstalled.";tput sgr0;
	   exit 0
	  ;;
	
	c ) IMAGE=$OPTARG;
	    image_latest_func;
	    # Exist image?
	    if [[ -z `docker images --no-trunc | grep -v 'REPOSITORY' | awk -F ' ' ' {print $1,$2} ' | sed "s/ /:/g" | grep "$IMAGE"` ]];then
		echo -e "\E[31mERROR: Image not found in registry docker. Stop installation.">&2;tput sgr0;
		exit 1;
	    fi;
	    copy_meta_func;
	    pwd=$PWD;
	    IMAGE=`echo $IMAGE | sed "s/\//./g"`;
	    echo;
	    # Remove exist dirrectory
	    if [[ -d /tmp/meta_$IMAGE ]];then
		echo "Removing old dirrectory."
		rm -r /tmp/meta_$IMAGE;
	    fi;
	    mv $TEMPLATE_DIR/meta /tmp/meta_$IMAGE;
	    cd $pwd;
	    rm -r $TEMPLATE_DIR;
	    echo "Meta files are moved to a folder /tmp/meta_$IMAGE";
	    echo;
	    exit 0
	  ;;
	
	I ) IMAGE=$OPTARG;
	    image_latest_func;
	    copy_meta_func;
	    pwd=$PWD;
	    cd $TEMPLATE_DIR/meta;
	    echo;
	    cat DESCRIPTION;
	    echo;
	    echo "    Time of creation:";
	    cat BUILDSTAMP;
	    cd $pwd;
	    rm -rf $TEMPLATE_DIR;
	    echo;
	    exit 0
	  ;;

	h ) echo "$USAGE"; 
	    exit 0
	  ;;
	
	-)  case "${OPTARG}" in
		help)		echo "$USAGE";
				exit 0
		;;
		repos-list)	echo;
				echo "      List repositories:";
				echo;
				sqlite3 $SAM_DB_SQLITE "SELECT Id,ReposFlag,ReposName,ReposURL,ReposUser FROM $SAM_DB_TABLE_REPOS" | column -t -s '|' ; 
				echo;
				exit 0
		;;
		repos-add)	echo;
				echo "      Adding repository:";
				echo;
				read -e -p "Repository Url: " SAM_DB_TABLE_REPOS_URL;
				if [[ -z $SAM_DB_TABLE_REPOS_URL ]];then
					echo -e "\E[31mERROR: Variable from Url is empty.">&2;tput sgr0;
					exit 1;
				fi;
				read -e -p "Name repository: " SAM_DB_TABLE_REPOS_NAME;
				if [[ -z $SAM_DB_TABLE_REPOS_NAME ]];then
					echo -e "\E[31mERROR: Variable from name repository is empty.">&2;tput sgr0;
					exit 1;
				fi;	
				
				read -e -p "Username: " SAM_DB_TABLE_REPOS_USER; 
				read -s -p "Password: " SAM_DB_TABLE_REPOS_PASS; echo;
				SAM_DB_TABLE_REPOS_PASS=`echo "$SAM_DB_TABLE_REPOS_PASS" | base64`;
				read -e -p "Email: "    SAM_DB_TABLE_REPOS_EMAIL;
				
				#save in db
				echo;
				echo "Saving in db.";
				sqlite3 $SAM_DB_SQLITE "insert into $SAM_DB_TABLE_REPOS (ReposFlag,ReposName,ReposUrl,ReposUser,ReposPass,ReposEmail) values (' ','$SAM_DB_TABLE_REPOS_NAME','$SAM_DB_TABLE_REPOS_URL','$SAM_DB_TABLE_REPOS_USER','$SAM_DB_TABLE_REPOS_PASS','$SAM_DB_TABLE_REPOS_EMAIL');";
				unset SAM_DB_TABLE_REPOS_URL;
				unset SAM_DB_TABLE_REPOS_NAME;
				unset SAM_DB_TABLE_REPOS_USER;
				unset SAM_DB_TABLE_REPOS_PASS;
				unset SAM_DB_TABLE_REPOS_EMAIL;
				exit 0
		;;
		repos-delete)	echo;
				echo "      Deleting repository:";
				echo;
				read -e -p "Enter name of repository: " SAM_DB_TABLE_REPOS_NAME;
				exist_repos_name_in_db_func;
				
				#delete in db
				echo;
				echo "Deleting in db.";
				sqlite3 $SAM_DB_SQLITE "delete from $SAM_DB_TABLE_REPOS where ReposName='$SAM_DB_TABLE_REPOS_NAME'";
				unset SAM_DB_TABLE_REPOS_NAME;
				exit 0
		;;
		repos-default)	echo;
				echo "      Selecting default repository:";
				echo;
				read -e -p "Enter name of repository: " SAM_DB_TABLE_REPOS_NAME;
				exist_repos_name_in_db_func;
				
				#reset column
				echo;
				echo "Saving in db.";
				sqlite3 $SAM_DB_SQLITE "update $SAM_DB_TABLE_REPOS SET ReposFlag=' '";
				#add flag
				sqlite3 $SAM_DB_SQLITE "update $SAM_DB_TABLE_REPOS SET ReposFlag='*' where ReposName='$SAM_DB_TABLE_REPOS_NAME'";
				unset SAM_DB_TABLE_REPOS_NAME;
				exit 0
		;;
		*)		if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
				    echo -e "\E[31mERROR: Non-option argument: '-${OPTARG}'">&2;tput sgr0;
				    exit 1;
				fi
		;;
	    esac
	    ;;
	
	*) echo
	  ;;
    esac
done

if [[ -z $IMAGE ]];then 
	IMAGE=$1;
	image_latest_func;
	if [[ -n `list_apps_in_db_func | awk 'BEGIN {OFS = ":"} {print $3, $4}' | grep "$IMAGE"` ]];then
	    echo -e "\E[31mERROR: App found in db. Stop installation.">&2;tput sgr0;
	    exit 1;
	fi;
	# Pull
	docker pull $IMAGE;
	if [[ $? -eq 0 ]]; then
		save_apps_to_db_sqlite_func;
		install_apps_func;
		echo -e "\E[32mApp $IMAGE installed.";tput sgr0;
		echo;
	else
		echo -e "\E[31mNot found image \"$1\" in docker registry." >&2;tput sgr0;
		exit 1;
	fi;
fi;
