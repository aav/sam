#!/bin/bash
#set -vx

if [[ -z $SAM_DB_LIST ]];then
        SAM_DB_LIST='/var/db/sam/list_installed';
fi;

if [[ -z $BIN_DIR ]]; then
        BIN_DIR='/opt/bin';
fi;

if [[ -z $SAM_DB_SQLITE ]];then
        SAM_DB_SQLITE='/var/db/sam/smilart.db';
fi;
##Constant

IMAGE='';

## Functions
# Copy META from image
copy_meta_func () {
	# input: $IMAGE 
	TEMPLATE_DIR=`mktemp -d`;
	docker run -i -t --rm -v $TEMPLATE_DIR:$TEMPLATE_DIR  --net=host --entrypoint="cp" $IMAGE -r /meta $TEMPLATE_DIR/meta 2>&1 > /dev/null;
	if [[ $? -ne 0 ]]; then
		echo -e "\E[31mERROR: Directory '/meta' not found in image.">&2;tput sgr0;
		rm -rf $TEMPLATE_DIR;
		exit 1;
	fi;
	# output $pwd $TEMPLATE_DIR
}

# Uninstall apps function
uninstall_apps_func () {
	#
	echo;
	echo -e "\E[32mUninstalling app $IMAGE.";tput sgr0;
	copy_meta_func;
	pwd=$PWD;
	cd $TEMPLATE_DIR/meta;
	source $TEMPLATE_DIR/meta/uninstall;
	cd $pwd;
	rm -rf $TEMPLATE_DIR;
	echo;
}

# Install apps function
install_apps_func () {
	echo;
	echo -e "\E[32mInstalling app $IMAGE.";tput sgr0;
	copy_meta_func;
	pwd=$PWD;
	cd $TEMPLATE_DIR/meta;
	echo;
	source $TEMPLATE_DIR/meta/install;
	cd $pwd;
	rm -rf $TEMPLATE_DIR;
	echo;
}

# Save apps in db function
save_apps_to_db_sqlite_func () {
	# Exist app in db?
	TEST_EXIST=`echo "$IMAGE" | awk -F ':' 'NF--' | sed "s/ /:/g"`;
	if [[ -n `list_apps_in_db_func | awk  'BEGIN {OFS = ":"} {print $3, $4}' | grep $TEST_EXIST` ]];then
		echo -e "\E[31mERROR: App exist in db. ">&2;tput sgr0;
		echo "List exist apps: ./sam -l";
		echo;
		exit 1;
	fi;
	echo  "Save app to db.";
	# Collecting info for app
	IMAGE_ID=`docker images --no-trunc | grep -v 'REPOSITORY' | awk -F ' ' ' {print $1,$2,$3} ' | sed "s/ /:/g" | grep "$IMAGE" | awk -F ':' '{print $NF}'`;
	IMAGE_VERSION=`docker images --no-trunc | grep -v 'REPOSITORY' | awk -F ' ' ' {print $1,$2} ' | sed "s/ /:/g" | grep "$IMAGE" | awk -F ':' '{print $NF}'`;
	IMAGE_NAME=`docker images --no-trunc | grep "$IMAGE_ID" | tail -1 | awk -F ' ' ' {print $1} '`;
	# Edit db
	sqlite3 $SAM_DB_SQLITE "insert into $SAM_DB_TABLE_INSTALL_APPS (DockerId,ImageName,ImageVersion,ImageRepos) values ('$IMAGE_ID','$IMAGE_NAME','$IMAGE_VERSION','0');";
	unset TEST_EXIST;
	unset IMAGE_ID;
	unset IMAGE_VERSION;
	unset IMAGE_NAME;
}

# Delete apps in db function
delete_apps_to_db_func () {
	echo  "Deleting app in db.";
	sqlite3 $SAM_DB_SQLITE "delete from $SAM_DB_TABLE_INSTALL_APPS where DockerId='$IMAGE'";
	
}

# Image latest?
image_latest_func (){
	if [[ -z `echo "$IMAGE" | awk -F '/' '{print $NF}' | awk -F ':' '{print $2}'` ]];then
		IMAGE="$IMAGE:latest";
	fi;
}

create_connect_func() {
	echo "Creating 'connect' function.";
	echo '#!/bin/bash 

connect_func(){
PID=`/usr/bin/docker inspect --format {{.State.Pid}} $1`;
if [ -z $PID ]; then
        echo -e "\E[31mContainer $1 is not found."; tput sgr0;
else
        if [ $PID -eq 0 ]; then
                echo -e "\E[31mContainer $1 is not started.";tput sgr0;
        else
                echo -e "\E[32mConnect to container $1."; tput sgr0;
                /usr/bin/docker exec -i -t $1 /bin/bash -c "cd /root ; TERM=xterm HOME=/root /bin/bash";
        fi;
fi;
}

connect_func $@;' > $BIN_DIR/connect;
	chmod +x $BIN_DIR/connect;
	if [[ -z `id smilart 2>&1 | grep 'no such user'` ]]; then
		chown smilart $BIN_DIR/connect;
	fi;
}

### Commands
#
if [[ -z `which docker` ]]; then
	echo -e "\E[31mERROR: Not found command 'docker' in system.">&2;tput sgr0;
	exit 1;
fi;

# This root?
if [[ $EUID -ne 0 ]]; then
	echo -e "\E[31mThis script must be run as root">&2;tput sgr0;
	exit 1;
fi

# Exist BIN_DIR dirrectory ?
if ! [[ -d $BIN_DIR ]]; then
	echo "Creating $BIN_DIR.";
	mkdir -p $BIN_DIR;
fi

# Exist BIN_DIR in path ?
if [[ -z `echo $PATH | grep $BIN_DIR` ]]; then
	echo -e "\E[31mERROR: Not found path \"$BIN_DIR\" in environments \$PATH. Add.">&2;tput sgr0;
	exit 1;
fi;

# Exist command 'connect'?
if ! [[ -f $BIN_DIR/connect ]]; then
	create_connect_func;
	echo;
fi;

# Exist command sqlite3
if [[ -z `which sqlite3` ]]; then
	echo -e "\E[31mERROR: Not found command 'sqlite3' in system.">&2;tput sgr0;
	exit 1;
fi;

# Exist db?
SAM_DB_TABLE_INSTALL_APPS="Apps";
if [[ -z `sqlite3 $SAM_DB_SQLITE "SELECT name FROM sqlite_master WHERE type='table' AND name='$SAM_DB_TABLE_INSTALL_APPS'"` ]];then
	echo;
	echo "Not found db sam: $SAM_DB_SQLITE. Creating db - $SAM_DB_TABLE_INSTALL_APPS.";
	echo;
	sqlite3 $SAM_DB_SQLITE "create table $SAM_DB_TABLE_INSTALL_APPS (id INTEGER PRIMARY KEY,DockerId TEXT,ImageName TEXT,ImageVersion TEXT,ImageRepos INTEGER);";
fi;

SAM_DB_TABLE_REPOS="Repos";
SAM_DB_TABLE_REPOS_URL="smilart";
if [[ -z `sqlite3 $SAM_DB_SQLITE "SELECT name FROM sqlite_master WHERE type='table' AND name='$SAM_DB_TABLE_REPOS'"` ]];then
	echo;
	echo "Not found db sam: $SAM_DB_SQLITE. Creating db - $SAM_DB_TABLE_REPOS.";
	echo;
	sqlite3  $SAM_DB_SQLITE "create table $SAM_DB_TABLE_REPOS (id INTEGER PRIMARY KEY,ReposFlag TEXT,ReposName TEXT,ReposUrl, TEXT, ReposUser TEXT, ReposPass TEXT, ReposEmail TEXT);";
	echo "Adding default repository: $SAM_DB_TABLE_REPOS_URL";
	sqlite3 $SAM_DB_SQLITE "insert into $SAM_DB_TABLE_REPOS (ReposFlag,ReposName,ReposUrl,ReposUser,ReposPass,ReposEmail) values ('*','official','$SAM_DB_TABLE_REPOS_URL',' ',' ',' ');";
fi;
unset SAM_DB_TABLE_REPOS_URL;

#List in SQLite db
list_apps_in_db_func () {
	sqlite3 $SAM_DB_SQLITE "SELECT * from $SAM_DB_TABLE_INSTALL_APPS" | awk -F '|' '{print $1, $2, $3, $4, $5}';
}

list_repos_in_db_func () {
	sqlite3 $SAM_DB_SQLITE "SELECT id, ReposFlag, ReposName, ReposUrl, ReposUser, ReposPass, ReposEmail from $SAM_DB_TABLE_REPOS" | awk -F '|' '{print $1, $2, $3, $4, $5, $6}';
}
#Exist repos name?
exist_repos_name_in_db_func() {
	if [[ -z $SAM_DB_TABLE_REPOS_NAME ]];then
		echo -e "\E[31mERROR: Variable from name repository is empty.">&2;tput sgr0;
		exit 1;
	fi;
	if [[ -z `sqlite3 $SAM_DB_SQLITE "SELECT ReposName from $SAM_DB_TABLE_REPOS" | \
                        while read line; do \
                            if [ $line == $SAM_DB_TABLE_REPOS_NAME ];then \
                                echo $line; \
                                break; \
                            fi; \
                        done;` ]];then
		echo -e "\E[31mERROR: Repository name '$SAM_DB_TABLE_REPOS_NAME' is not found in db.">&2;tput sgr0;
		echo "Existing repositories look with 'sam help listrepos'.";
		exit 1;
	fi;
}

###Help section
USAGE="
  Usage:
        sam [--global-options] <command> [--command-options] [arguments]

  Global Options:
        --help, -h              Help.
        --debug, -x             Debug mode.


  Commands:
        help, ?                 Print help.
     
     Software Management:
        install, in             Install applications.
        installfile             Install applications from archive.
        remove, rm              Remove applications.
        list                    List installed applications.
        info                    Print application info.

     Repository Management:
        addrepo, ar             Add a new repository.
        removerepo, rr          Remove specified repository.
        modifyrepo, mr          Modify specified repository.
        listrepos, lr           List all defined repositories.


  Environments:
	BIN_DIR			Path to directory with executable files, default: BIN_DIR=$BIN_DIR
";

USAGE_INSTALL='
install (in) [repo/]<app>:<version>

Install smilart applications with specified capabilities.

';
USAGE_INSTALLFILE="
install <path>

Install smilart applications with specified capabilities from gzip and tar archive.

";

USAGE_REMOVE="
remove (rm) <name>

Remove smilart applications with specified capabilities.

";

USAGE_LIST="
list [options]

List all install smilart applications.

  Command options:
    --raw                       List all install smilart applications in RAW format.

";

USAGE_INFO="
info <name>

Print application info.

";

USAGE_ADDREPO="
addrepo (ar) [options] <name> <url> [<username> <password> <mail>]

Add a repository to the system.

  Command options:
    --default                   Add the repository as default.

";

USAGE_REMOVEREPO="
removerepo (rr) <id|name>

Remove repository specified by name or number.

";

USAGE_MODIFYREPO="
modifyrepo (mr) <id> [--default] [--name <name>] [--url <url>] [--username <username>] [--password <password>] [--email <email>]

Modify properties of repositories specified.

  Command options:
-d  --default                   Set priority of the repository.
    --name                      Set a descriptive name for the repository.
    --url                       Set a url for the repository.
    --username                  Set the user name for authentication to the server.
    --password                  Set the password for authentication to the server.
    --email                     Set the email for authentication to the server. 

";

USAGE_LISTREPOS="
repos (lr) [options]

List all defined repositories.
    --raw                       List all defined repositories in RAW format.
";

###Function for case
install_func(){
echo "OK"
}

installfile_func(){
echo "OK"
}

remove_func(){
echo "OK"
}

list_func(){
echo "OK"
}

info_func(){
echo "OK"
}

addrepo_func(){
    #Default repo?
    SAM_DB_TABLE_REPOS_FLAG='';
    if [[ -n `echo $SAM_ARGUMENTS | grep -w '\-\-default'` ]];then
         SAM_ARGUMENTS=`echo "$SAM_ARGUMENTS" | sed 's/--default //'`;
         SAM_DB_TABLE_REPOS_FLAG='*';
    fi;
    IFS=' ' read -a ARR_OF_ARG <<< "$SAM_ARGUMENTS";
    if [[ -z ${ARR_OF_ARG[0]} ]] || [[ -z ${ARR_OF_ARG[1]} ]];then
         echo "$USAGE_ADDREPO";
         echo -e "\E[31mERROR: Argument for "sam addrepo" is not correct.">&2;tput sgr0;
         exit 1;
    fi;
    SAM_DB_TABLE_REPOS_NAME="${ARR_OF_ARG[0]}";
    SAM_DB_TABLE_REPOS_URL="${ARR_OF_ARG[1]}";
    SAM_DB_TABLE_REPOS_USER="${ARR_OF_ARG[2]}";
    SAM_DB_TABLE_REPOS_PASS="${ARR_OF_ARG[3]}";
    SAM_DB_TABLE_REPOS_EMAIL="${ARR_OF_ARG[4]}";
    if [[ -n `sqlite3 $SAM_DB_SQLITE "SELECT ReposName from $SAM_DB_TABLE_REPOS" | \
         while read line; do \
             if [ $line == $SAM_DB_TABLE_REPOS_NAME ];then \
                  echo $line; \
                  break; \
             fi; \
         done;` ]];then
         echo -e "\E[31mERROR: Repository name '$SAM_DB_TABLE_REPOS_NAME' exist in db.">&2;tput sgr0;
         exit 1;
        fi;
    SAM_DB_TABLE_REPOS_PASS=`echo "$SAM_DB_TABLE_REPOS_PASS" | base64`;
    
    #save in db
    sqlite3 $SAM_DB_SQLITE "insert into $SAM_DB_TABLE_REPOS (ReposFlag,ReposName,ReposUrl,ReposUser,ReposPass,ReposEmail) values ('$SAM_DB_TABLE_REPOS_FLAG','$SAM_DB_TABLE_REPOS_NAME','$SAM_DB_TABLE_REPOS_URL','$SAM_DB_TABLE_REPOS_USER','$SAM_DB_TABLE_REPOS_PASS','$SAM_DB_TABLE_REPOS_EMAIL');";
    if [[ -n $SAM_DB_TABLE_REPOS_FLAG ]];then
	sqlite3 $SAM_DB_SQLITE "update $SAM_DB_TABLE_REPOS SET ReposFlag=' '";
	sqlite3 $SAM_DB_SQLITE "update $SAM_DB_TABLE_REPOS SET ReposFlag='*' where ReposName='$SAM_DB_TABLE_REPOS_NAME'";
    fi;
    unset SAM_DB_TABLE_REPOS_FLAG;
    unset SAM_DB_TABLE_REPOS_URL;
    unset SAM_DB_TABLE_REPOS_NAME;
    unset SAM_DB_TABLE_REPOS_USER;
    unset SAM_DB_TABLE_REPOS_PASS;
    unset SAM_DB_TABLE_REPOS_EMAIL;
}

removerepo_func(){
    #Found repo name in db?
    if [[ -n `sqlite3 $SAM_DB_SQLITE "SELECT ReposName from $SAM_DB_TABLE_REPOS" | \
        while read line; do \
            if [ $line == $SAM_ARGUMENTS ];then \
                 echo $line; \
                 break; \
            fi; \
        done;` ]];then

	#delete in db
	#Default repository?
	if [[ '*' == `sqlite3 $SAM_DB_SQLITE "select ReposFlag from $SAM_DB_TABLE_REPOS where ReposName='$SAM_ARGUMENTS'"` ]]; then
		echo -e "\E[31mERROR: Repository with name '$SAM_ARGUMENTS' is default.">&2;tput sgr0;
        	exit 1;
	fi;
	sqlite3 $SAM_DB_SQLITE "delete from $SAM_DB_TABLE_REPOS where ReposName='$SAM_ARGUMENTS'";

    #Found id in db?	
    elif [[ -n `sqlite3 $SAM_DB_SQLITE "SELECT Id from $SAM_DB_TABLE_REPOS" | \
        while read line; do \
            if [ $line == $SAM_ARGUMENTS ];then \
                 echo $line; \
                 break; \
	    fi; \
	done;` ]];then
	
	#delete in db
        #Default repository?
        if [[ '*' == `sqlite3 $SAM_DB_SQLITE "select ReposFlag from $SAM_DB_TABLE_REPOS where id='$SAM_ARGUMENTS'"` ]]; then
                echo -e "\E[31mERROR: Repository with number '$SAM_ARGUMENTS' is default.">&2;tput sgr0;
                exit 1; 
        fi;
        sqlite3 $SAM_DB_SQLITE "delete from $SAM_DB_TABLE_REPOS where Id='$SAM_ARGUMENTS'";
    else
	    echo -e "\E[31mERROR: Repository name and number '$SAM_ARGUMENTS' not found in db.">&2;tput sgr0;
            exit 1;

    fi;
}

modifyrepo_func(){
    SAM_DB_TABLE_REPOS_ID=`echo $SAM_ARGUMENTS |  awk ' {print $1} '`
    if [[ -z `sqlite3 $SAM_DB_SQLITE "SELECT Id from $SAM_DB_TABLE_REPOS" | \
        while read line; do \
            if [ $line == $SAM_DB_TABLE_REPOS_ID ];then \
                 echo $line; \
                 break; \
            fi; \
        done;` ]];then
	echo -e "\E[31mERROR: Repository number '$SAM_DB_TABLE_REPOS_ID' not found in db.">&2;tput sgr0;
	exit 1;
    fi;
    
	
}

listrepos_func(){
    echo;
    echo "      List repositories:";
    echo;
    LIST_REPOSITORIES=`sqlite3 -header $SAM_DB_SQLITE "SELECT id as Num, ReposFlag as Def, ReposName as Name, ReposUrl as Url, ReposUser as User FROM $SAM_DB_TABLE_REPOS" |  column -t -s '|' -o ' | '`;

    LIST_REPOSITORIES_MAX_LINE=`echo "$LIST_REPOSITORIES" | wc -L`;
    echo "$LIST_REPOSITORIES" | sed -e "1 a `for i in \`seq 1 $LIST_REPOSITORIES_MAX_LINE\`; do echo -n '-';  done`"
    echo;
    unset LIST_REPOSITORIES_MAX_LINE;
    unset LIST_REPOSITORIES;
}

###Case section
SAM_ARGUMENTS=''
#set -vx
while getopts ":h-:" OPTIONS
do
    case $OPTIONS in
        -) case "${OPTARG}" in
                help)
                    echo "$USAGE";
                    exit 0
                    ;;

                debug)
                    set -vx;
                    SAM_ARGUMENTS=`echo $@ | sed 's/--debug //'`
                    ;;
                \?)
                    echo -e "\E[31mERROR: Unknown option: '--$OPTARG'">&2;tput sgr0;
                    exit 1
                    ;;
           esac
           ;;
        \?)
           echo -e "\E[31mERROR: Unknown option: '-$OPTARG'">&2;tput sgr0;
           exit 1
           ;;
    esac
done

if [[ -z $SAM_ARGUMENTS ]]; then
        SAM_ARGUMENTS=`echo $@`;
fi;

case `echo $SAM_ARGUMENTS | awk ' {print $1} '` in
        help)	case `echo $SAM_ARGUMENTS | sed 's/help //'` in
			install)	echo "$USAGE_INSTALL"
			;;
			installfile)	echo "$USAGE_INSTALLFILE"
			;;
			remove)		echo "$USAGE_REMOVE"
			;;
			list) 		echo "$USAGE_LIST"
			;;
			info)		echo "$USAGE_INFO"
			;;
			addrepo)	echo "$USAGE_ADDREPO"
			;;
			removerepo)	echo "$USAGE_REMOVEREPO"
			;;
			modifyrepo)	echo "$USAGE_MODIFYREPO"
			;;
			listrepos)	echo "$USAGE_LISTREPOS"
			;;
			*)
				echo "$USAGE";
				echo;
				if [[ -n `echo $SAM_ARGUMENTS | sed 's/help//'` ]];then
					echo -e "\E[31mERROR: Unknown command: 'sam $SAM_ARGUMENTS'">&2;tput sgr0;
                                	exit 1;
				fi;
		        	exit 0
           		;;
		esac		
        ;;

        install)	install_func;
        ;;

        installfile)	installfile_func;
        ;;

        remove)		remove_func;
        ;;

        list)		list_func;
        ;;

        info)		info_func;
        ;;

        addrepo)        SAM_ARGUMENTS=`echo "$SAM_ARGUMENTS" | sed 's/addrepo //'`;
			addrepo_func;
			exit 0
        ;;

        removerepo)	SAM_ARGUMENTS=`echo "$SAM_ARGUMENTS" | sed 's/removerepo //'`;
			removerepo_func;
			exit 0
        ;;

        modifyrepo)     SAM_ARGUMENTS=`echo "$SAM_ARGUMENTS" | sed 's/modifyrepo //'`;
			modifyrepo_func;
			exit 0
        ;;

        listrepos)	listrepos_func;
			exit 0
        ;;
        *)
	   echo;
	   echo "$USAGE";
           echo -e "\E[31mERROR: Unknown command: 'sam $SAM_ARGUMENTS'">&2;tput sgr0;
           exit 1
        ;;

esac;

